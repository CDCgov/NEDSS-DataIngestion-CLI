buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    ext {
        testFailures = 0
    }
    dependencies {
        classpath("com.dipien:semantic-version-gradle-plugin:2.0.0")
    }
}

plugins {
    id 'java'
    id 'application'
    id 'jacoco'

    // Apply GraalVM Native Image plugin
    id 'org.graalvm.buildtools.native' version '0.9.23'

    //Sonarqube Scan
    id 'org.sonarqube' version '4.4.1.3373'
}


group = 'gov.cdc.dataingestion'
version = '1.0.1-SNAPSHOT'  // The plugin will assign the root project version to all its subprojects.
apply plugin: "com.dipien.semantic-version"

application {
    mainClass = 'gov.cdc.dataingestion.DataIngestionCLI'
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.clojars.org'
        name 'Clojars'
    }
}

graalvmNative {
    binaries.all {
        resources.autodetect()
    }
    binaries.main {
        def osName = System.getProperty('os.name').toLowerCase();
        def osArch = System.getProperty('os.arch').toLowerCase();
        if(osName.contains("win")) {
            imageName.set("NBS-DataIngestion-CLI-windows")
        }
        else if(osName.contains("nix") || osName.contains("nux")) {
            imageName.set("NBS-DataIngestion-CLI-linux")
        }
        else if(osName.contains("mac")) {
            if(osArch == "aarch64") {
                imageName.set("NBS-DataIngestion-CLI-macos-aarch64")
            }
            else {
                imageName.set("NBS-DataIngestion-CLI-macos")
            }
        }
        else {
            imageName.set("NBS-DataIngestion-CLI")
        }
        debug = true
        verbose = true
        buildArgs.add("-H:+ReportExceptionStackTraces")
        buildArgs.add("-H:+ReportUnsupportedElementsAtRuntime")
        buildArgs.add("--initialize-at-build-time=java.lang.String")
        buildArgs.add("--initialize-at-build-time=java.util.**")
        buildArgs.add("-H:ReflectionConfigurationFiles=${project.projectDir}/src/main/resources/reflection-config.json")
    }
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    implementation 'info.picocli:picocli:4.7.4'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.4'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'org.json:json:20231013'
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}".toString(),"-Aother.resource.patterns=.*"]
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.withType(Test) {
    systemProperty "USERNAME", project.findProperty("USERNAME")
    systemProperty "PASSWORD", project.findProperty("PASSWORD")
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

subprojects {
    repositories {
        mavenCentral()
        maven {
            url "https://packages.confluent.io/maven"
        }
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'

    tasks.named('test') {
        finalizedBy tasks.named('jacocoTestReport', JacocoReport)
    }
}

sonar {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "CDCgov_NEDSS-DataIngestion-CLI"
        property "sonar.organization", "cdcgov"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.rootDir}/build/customJacocoReportDir/test/jacocoTestReport.xml"
    }
}